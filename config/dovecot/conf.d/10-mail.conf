##
## Mailbox locations and namespaces
##

# Location for users' mailboxes. The default is empty, which means that Dovecot
# tries to find the mailboxes automatically. This won't work if the user
# doesn't yet have any mail, so you should explicitly tell Dovecot the full
# path.
#
# If you're using a single uid/gid for all users, you can do:
mail_location = maildir:/var/vmail/%d/%n

# If you're using multiple uids/gids, you can either:
# 1. Use a static uid/gid mapping:
#   mail_location = maildir:/var/vmail/%d/%n
#   mail_uid = 5000
#   mail_gid = 5000
#
# 2. Use dynamic uid/gid mapping:
#   mail_location = maildir:/var/vmail/%d/%n
#   mail_uid = vmail
#   mail_gid = vmail

# By default Dovecot uses index (maintains a list of messages) and dbox (single
# file per message) formats for the indexes. An alternative to those is the
# sdbox format, which uses dbox format but keeps the index files in memory.
# Like mdbox format it also limits the number of dovecot.index.cache files.
#mailbox_format = sdbox

# If you have a mailbox format not supported by Dovecot, you can specify a
# custom mailbox format by giving it a name and specifying the command to
# run. The command should write the mailbox to stdout in the format you want.
#mailbox_format = custom:command

# Set the mail location to use when a user's mail_location is empty.
#mail_home = 

# Default namespace
namespace inbox {
  # Namespace type: private, shared or public
  type = private

  # Hierarchy separator to use. You should use the same separator for all
  # namespaces or some clients get confused. '/' is usually a good one.
  # The default however depends on the underlying mail storage format.
  separator = /

  # Prefix required to access this namespace. This needs to be different for
  # all namespaces. For example "Public/".
  #prefix = 

  # Physical location of the mailbox. This is in same format as
  # mail_location, which is also the default for it.
  #location =

  # There can be only one INBOX, and this setting defines which namespace
  # has it.
  inbox = yes

  # If namespace is hidden, it's not advertised to clients via NAMESPACE
  # extension. You'll most likely also want to set list=no. This is mostly
  # useful when converting from another server with different namespaces which
  # you want to deprecate but still keep working. For example you can create
  # hidden namespaces with prefixes "~/mail/", "~%u/mail/" and "mail/".
  #hidden = no

  # Show the mailboxes under this namespace with LIST command. This makes the
  # namespace visible for clients that don't support NAMESPACE extension.
  # "children" value lists child mailboxes, but hides the namespace prefix.
  list = yes

  # Namespace handles its own subscriptions. If set to "no", the parent
  # namespace handles them (empty prefix should have this as "yes")
  subscriptions = yes

  # See 15-mailboxes.conf for definitions of special mailboxes.
}

# Example shared namespace configuration
#namespace {
#  type = shared
#  separator = /
#  prefix = shared/%%u/
#  location = maildir:%%h/mail:INDEX=%%h/mail/shared/%%u
#  subscriptions = no
#  list = children
#}

# Example shared namespace configuration for groupware
#namespace {
#  type = shared
#  separator = /
#  prefix = shared/%%u/
#  location = maildir:%%h/mail:INDEX=%%h/mail/shared/%%u
#  subscriptions = no
#  list = children
#}

# System user and group used to access mails. If you use multiple, userdb
# can override these by returning uid or gid fields. You can use either numbers
# or names. <doc/wiki/UserIds.txt>
mail_uid = 5000
mail_gid = 5000

# Group to enable temporarily for privileged operations. Currently this is
# used only in INBOX when either its initial creation or dotlocking fails.
# Typically this is set to "mail" to give access to /var/mail.
mail_privileged_group = vmail

# Grant access to these supplementary groups for mail processes. Typically
# these are used to set up access to shared mailboxes. Note that it may be
# dangerous to set these if users can create symlinks (e.g. if "mail" group is
# set here, ln -s /var/mail ~/mail/var could allow a user to delete others'
# mailboxes, or ln -s /secret/shared/box ~/mail/me allows reading it).
mail_access_groups = vmail

# Allow full filesystem access to clients. There's no access checks, so this
# should be used only if the filesystem is trusted. This setting is mostly
# used for IMAP clients that want to directly access the filesystem.
#mail_full_filesystem_access = no

# Maximum allowed length for mail keyword name. It's only forced when trying
# to create or rename keywords.
#mail_max_keyword_length = 50

# ':' separated list of directories under which chrooting is allowed for mail
# processes (ie. /var/mail will allow chrooting to /var/mail/foo/bar too).
# This setting doesn't affect login_chroot, mail_chroot or auth chroot
# settings. If this setting is empty, "/./" in home directory is ignored.
# WARNING: Never add directory tree which contains the home directory itself
# (ie. /home/username not /home/username/mail), or you may break the chrooting
# completely. /var/mail is allowed, because it doesn't contain the home
# directory itself.
#valid_chroot_dirs = 

# Default chroot directory for mail processes. This can be overridden for
# specific users in user database by giving /./ in user's home directory
# (ie. /home/./user chroots into /home). Note that usually there should be no
# real filesystem access to the chroot directory.
#mail_chroot = 

# UNIX socket path to master authentication server to find users.
# This is used by imap (for shared users) and lda.
#auth_socket_path = /var/run/dovecot/auth-userdb

# Directory where to store runtime data.
#mail_temp_dir = /tmp

# Valid UID range for users, defaults to 500 and above. This is mostly
# to make sure that users can't log in as daemons or other system users.
# Note that denying root logins is hardcoded to dovecot binary and can't
# be done even if first_valid_uid is set to 0.
first_valid_uid = 5000
last_valid_uid = 5000

# Valid GID range for users, defaults to 1 and above. This is mostly
# to make sure that users can't log in as daemons or other system users.
# Note that denying root logins is hardcoded to dovecot binary and can't
# be done even if first_valid_gid is set to 0.
first_valid_gid = 5000
last_valid_gid = 5000

# Maximum allowed length for mail address. This is mostly to make sure that
# users can't use extremely long addresses.
#mail_max_userip_length = 64

# ':' separated list of never login users, similar to never_users userdb
# setting. The difference is that this setting is used for login processes
# (imap, pop3) while never_users is used for userdb lookups (shared
# mailboxes, etc).
#mail_never_users = 

# Disable THR command where user doesn't have 't' right in any mailbox
#mail_plugins = acl

# ACL to use for root user. You can specify either 'vfile', 'ldap' or
# 'static' ACL plugin name here.
#root = acl

# Enable mail process debugging. This can help you figure out why Dovecot
# isn't finding your mails.
#mail_debug = no

# Log prefix for mail processes. See doc/wiki/Variables.txt for list of
# possible variables you can use.
#mail_log_prefix = "%Us(%u): "

# Max. number of line feeds in mail headers before giving up. The default is
# 1000 to avoid having unbounded memory usage.
#mail_max_header_line_length = 1000

# Default MAIL environment.
#mail_env = 

# Log prefix for deliveries to user's own INBOX.
#deliver_log_prefix = "%Ms(%u): "

# Locking method for index files. Alternatives are fcntl, flock and dotlock.
# Dotlocking uses some tricks which may create more disk I/O than other
# locking methods. NFS users: flock doesn't work, remember to change
# mmap_disable setting.
#lock_method = fcntl

# Directory where mails are temporarily stored. Usually it's the same as
# mail location. It gets cleaned up by various means, so it's just a
# temporary location.
#mail_temp_dir = 

# How long to wait between attempts to create dotlock when the lock is
# already taken. Default is 1 second.
#dotlock_use_excl = yes

# How long to wait between attempts to create dotlock when the lock is
# already taken. Default is 1 second.
#dotlock_timeout = 1s

# umask to use for mail files and directories
#umask = 0077

# Drop all privileges before exec()ing the mail process. This is mostly
# meant for debugging, otherwise you don't get core dumps. It could be a small
# security risk if you use single UID for multiple users, as the users could
# ptrace() each others processes then.
#mail_drop_priv_before_exec = no

# Set max. process size in megabytes. Most of the memory goes to mmap()ing
# files, so it shouldn't harm much even if this limit is set pretty high.
#mail_process_size = 256

# Log 2**N slice of a big search. This makes it possible to quickly search
# for large amounts of users (or all users) when doing a database search.
#mail_log_max_lines_per_sec = 10

# Maximum number of concurrent mail processes. When this limit is reached,
# new users will have to wait until some process dies.
#mail_max_processes = 1024

# Show more verbose process titles (in ps). Currently shows user name and
# IP address. Useful for seeing who are actually using the IMAP processes
# (eg. shared mailboxes or if same uid is used for multiple accounts).
#verbose_proctitle = no

# Show protocol level SSL errors.
#verbose_ssl = no

# SSL certificate directory and file. The key file should be readable
# only by root. Included from 10-ssl.conf
#ssl_cert = </etc/ssl/certs/dovecot.pem
#ssl_key = </etc/ssl/private/dovecot.key

# File containing trusted SSL certificate authorities. Set this only if you
# intend to use ssl_verify_client_cert=yes. The CAfile should contain the
# CA-certificate(s) followed by the matching CRL(s). (e.g. CAfile
# /etc/ssl/certs/ca-certificates.crt)
#ssl_ca = 

# Request client to send a certificate. If you also want to require it, set
# ssl_require_client_cert=yes in 10-ssl.conf
#ssl_verify_client_cert = no

# Which field from certificate to use for username. commonName and
# x500UniqueIdentifier are the usual choices. You'll also need to set
# ssl_username_from_cert=yes.
#ssl_cert_username_field = commonName

# SSL DH parameters
# Generate new params with `openssl dhparam -out /etc/dovecot/dh.pem 4096`
#ssl_dh = </etc/dovecot/dh.pem

# SSL protocols to use
#ssl_protocols = !SSLv2 !SSLv3

# SSL ciphers to use
#ssl_cipher_list = ALL:!LOW:!SSLv2:!EXP:!aNULL

# Prefer the server's order of ciphers over client's.
#ssl_prefer_server_ciphers = no

# SSL crypto device to use, for valid values run "openssl engine"
#ssl_crypto_device =

# SSL extra options. Currently supported options are:
#   no_compression - Disable compression.
#ssl_options =
